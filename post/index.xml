<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on tazigi&#39;s blog</title>
    <link>https://tazegi.github.io/post/</link>
    <description>Recent content in Posts on tazigi&#39;s blog</description>
    <image>
      <title>tazigi&#39;s blog</title>
      <url>https://tazegi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://tazegi.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 05 Mar 2023 09:39:44 +0800</lastBuildDate><atom:link href="https://tazegi.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim</title>
      <link>https://tazegi.github.io/post/linux/vim/</link>
      <pubDate>Sun, 05 Mar 2023 09:39:44 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/vim/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/docker/</link>
      <pubDate>Sat, 04 Mar 2023 22:32:53 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/docker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Awk</title>
      <link>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/awk/</link>
      <pubDate>Fri, 03 Mar 2023 11:11:19 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/awk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Apache2</title>
      <link>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/apache2/</link>
      <pubDate>Fri, 03 Mar 2023 10:54:41 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/apache2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/mysql/</link>
      <pubDate>Fri, 03 Mar 2023 08:24:35 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/mysql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/ansible/</link>
      <pubDate>Thu, 02 Mar 2023 15:28:43 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/%E8%BF%90%E7%BB%B4/ansible/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ssh</title>
      <link>https://tazegi.github.io/post/linux/ssh/</link>
      <pubDate>Thu, 02 Mar 2023 14:24:54 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/ssh/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Awk</title>
      <link>https://tazegi.github.io/post/linux/awk/</link>
      <pubDate>Thu, 02 Mar 2023 14:17:30 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/awk/</guid>
      <description></description>
    </item>
    
    <item>
      <title>偏函数</title>
      <link>https://tazegi.github.io/post/python/%E5%81%8F%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 01 Mar 2023 15:05:06 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E5%81%8F%E5%87%BD%E6%95%B0/</guid>
      <description>对一个函数的部分参数固定,从而返回一个新包装函数,这个函数应该是关于剩余参数的一个函数</description>
    </item>
    
    <item>
      <title>上三角打印</title>
      <link>https://tazegi.github.io/post/python/%E4%B8%8A%E4%B8%89%E8%A7%92%E6%89%93%E5%8D%B0/</link>
      <pubDate>Wed, 01 Mar 2023 14:26:50 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E4%B8%8A%E4%B8%89%E8%A7%92%E6%89%93%E5%8D%B0/</guid>
      <description> def triangle_print(n): for i in range(1,n+1): for j in range(n,0,-1): print(len(str(j))*&amp;#39; &amp;#39; if j&amp;gt;i else j,end=&amp;#39; &amp;#39;) print() triangle_print(12) 1 2 1 3 2 1 4 3 2 1 5 4 3 2 1 6 5 4 3 2 1 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 9 8 7 6 5 4 3 2 1 10 9 8 7 6 5 4 3 2 1 11 10 9 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 </description>
    </item>
    
    <item>
      <title>正则表达式</title>
      <link>https://tazegi.github.io/post/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 27 Feb 2023 16:23:55 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>re</description>
    </item>
    
    <item>
      <title>序列化</title>
      <link>https://tazegi.github.io/post/python/%E5%BA%8F%E5%88%97%E5%8C%96/</link>
      <pubDate>Mon, 27 Feb 2023 15:05:28 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
      <description>pickle, json</description>
    </item>
    
    <item>
      <title>Shutil模块的使用</title>
      <link>https://tazegi.github.io/post/python/shutil%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 27 Feb 2023 14:02:36 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/shutil%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>复制删除文件夹</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>https://tazegi.github.io/post/python/%E9%80%92%E5%BD%92/</link>
      <pubDate>Mon, 27 Feb 2023 00:46:47 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E9%80%92%E5%BD%92/</guid>
      <description>阶乘</description>
    </item>
    
    <item>
      <title>插入排序</title>
      <link>https://tazegi.github.io/post/python/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 26 Feb 2023 21:35:31 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>将待排序数插入到已经排好的有序区的合适位置</description>
    </item>
    
    <item>
      <title>装饰器</title>
      <link>https://tazegi.github.io/post/python/%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Sat, 25 Feb 2023 23:13:17 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>装的一模一样</description>
    </item>
    
    <item>
      <title>选择排序</title>
      <link>https://tazegi.github.io/post/python/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 25 Feb 2023 14:29:24 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>找极值,放入一端</description>
    </item>
    
    <item>
      <title>递归函数</title>
      <link>https://tazegi.github.io/post/python/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 25 Feb 2023 13:46:36 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</guid>
      <description>函数调用次数替代循环次数</description>
    </item>
    
    <item>
      <title>冒泡排序</title>
      <link>https://tazegi.github.io/post/python/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sat, 25 Feb 2023 13:38:56 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>两两比较,大的往后推</description>
    </item>
    
    <item>
      <title>生成器函数</title>
      <link>https://tazegi.github.io/post/python/%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 22 Feb 2023 16:16:26 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E7%94%9F%E6%88%90%E5%99%A8%E5%87%BD%E6%95%B0/</guid>
      <description>斐波那契数列</description>
    </item>
    
    <item>
      <title>练习</title>
      <link>https://tazegi.github.io/post/python/%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Tue, 21 Feb 2023 12:13:26 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E7%BB%83%E4%B9%A0/</guid>
      <description>斐波那契数列,打印菱形</description>
    </item>
    
    <item>
      <title>九九乘法表</title>
      <link>https://tazegi.github.io/post/python/%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</link>
      <pubDate>Tue, 21 Feb 2023 11:56:10 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E4%B9%9D%E4%B9%9D%E4%B9%98%E6%B3%95%E8%A1%A8/</guid>
      <description> for i in range(1,10): for j in range(1,i+1): print(&amp;#39;{}*{}={:&amp;lt;{}}&amp;#39;.format(j,i,i*j,2 if j==1 else 3),end=&amp;#39;\n&amp;#39; if i==j else &amp;#34;&amp;#34;) 1*1=1 1*2=2 2*2=4 1*3=3 2*3=6 3*3=9 1*4=4 2*4=8 3*4=12 4*4=16 1*5=5 2*5=10 3*5=15 4*5=20 5*5=25 1*6=6 2*6=12 3*6=18 4*6=24 5*6=30 6*6=36 1*7=7 2*7=14 3*7=21 4*7=28 5*7=35 6*7=42 7*7=49 1*8=8 2*8=16 3*8=24 4*8=32 5*8=40 6*8=48 7*8=56 8*8=64 1*9=9 2*9=18 3*9=27 4*9=36 5*9=45 6*9=54 7*9=63 8*9=72 9*9=81 行结束符的使用 </description>
    </item>
    
    <item>
      <title>查看帮助</title>
      <link>https://tazegi.github.io/post/python/%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9/</link>
      <pubDate>Mon, 20 Feb 2023 23:11:31 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9/</guid>
      <description> 查看帮助 pydoc
vj python-docs pydoc -p 80 help(int) int* ipython中 /usr/share/doc/python-docs-3.11.1/html/index.html </description>
    </item>
    
    <item>
      <title>环境安装</title>
      <link>https://tazegi.github.io/post/python/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</link>
      <pubDate>Mon, 20 Feb 2023 19:31:47 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/python/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</guid>
      <description>环境安装 virtualenv #切换版本 alternatives --config python3 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple pip install virtualenv --user echo $PATH mkdir ~/venvs mkdir -p ~/projects/cmdb cd venvs virtualenv vcmdb #进入 . venvs/vcmdb/bin/activate #退出 deactivate python装在~/venvs/vcmdb
pyenv yum install git gcc make patch gdbm-devel openssl-devel curl sqlite-devel readline-devel zlig-devel bzip2-devel -y proxychains curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash .bashrc
export PATH=&amp;#34;$HOME/.pyenv/bin:$PATH&amp;#34; eval &amp;#34;$(pyenv init --path)&amp;#34; eval &amp;#34;$(pyenv virtualenv-init -)&amp;#34; .bash_profile
➜ ~ pyenv init # Load pyenv automatically by appending # the following to #~/.</description>
    </item>
    
    <item>
      <title>内核参数优化</title>
      <link>https://tazegi.github.io/post/linux/%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 19 Feb 2023 15:47:39 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/</guid>
      <description>内核参数优化 临时修改: sysctl -w parameter=VALUE ping: /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 读取: s sysctl -p /etc/sysctl.d/foo.conf 模块 卸载: modprobe -r MODULE 同 rmmod 加装: modprobe MODULE
加载根据文件路径: insmod 文件路径
modinfo -n 模块 insmod 不能解决信赖 加载uas之前心须加载usb_storage,因为uas信赖usb_storage 如果先加载uas会报错 centos编译内核 配置
cd /usr/src/linux cp /boot/config-`uname -r` .config 根据当前系统内核配置文件来配置内核 可选
将 CONFIG_SYSTEM_TRUSTED_KEYS 的值设为空 注释 CONFIG_MODULE_SIG=y make menuconfig
General setup ---&amp;gt; Local version - append to kernel release 输入&amp;#34;-evil-0.0.1&amp;#34; 编译: make -j 13 安装
make modules_install make install 卸载内核</description>
    </item>
    
    <item>
      <title>进程</title>
      <link>https://tazegi.github.io/post/linux/%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Sun, 19 Feb 2023 15:04:21 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E8%BF%9B%E7%A8%8B/</guid>
      <description>进程 查看进程编号: pidof firefox
prtstat `pidof X` 详细 prtstat 1 判断多线程: pstree -p 是否含有花括号
cat /proc/`pidof xfce4-panel`/status 查看进程状态码: man ps /CODES 查看信号
man 7 signal #zsh无效 trap -l 创建管道文件: mkfifo /data/test.fifo ps auf 显示进程关系 k 排序
# -%cpu表示降序 ps ao pid,%cpu,%mem,cmd k -%cpu ps au k -%cpu ps au k %cpu 优先级 设置
#zsh无效 s nice -n -10 ping baidu.com ➜ ~ ps ao pid,cmd,nice |grep ping 8959 sudo nice -n -10 ping baidu 0 8960 ping baidu.</description>
    </item>
    
    <item>
      <title>网络</title>
      <link>https://tazegi.github.io/post/linux/%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 19 Feb 2023 14:48:44 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E7%BD%91%E7%BB%9C/</guid>
      <description>网络 客户端随机使用端口,范围定义: /proc/sys/net/ipv4/ip_local_port_range 查看程序占用的端口
ss -ntlp lsof -i :22 孤儿连接: 在发第二个分手包时,服务器崩溃,客户端处于孤儿连接状态
# 指定孤儿连接数目 ➜ ~ cat /proc/sys/net/ipv4/tcp_max_orphans 65536 # 指定孤儿连接生存时间 ➜ ~ cat /proc/sys/net/ipv4/tcp_fin_timeout 60 半连接
#半连接 ➜ ~ cat /proc/sys/net/ipv4/tcp_max_syn_backlog 1024 #全连接 ➜ ~ cat /proc/sys/net/core/somaxconn 4096 ip addr 增加1个ip地址 s ip address add 192.168.10.100 dev wlan0 label wlan1:2 删除1个ip地址 s ip address del 192.168.10.100/32 dev wlan0 route 两个连接相同交换机的不同ip ping 通
s ip route add default dev wlan0 删除: s ip route del default dev wlan0 scope link 删除默认路由: s ip route del default via 192.</description>
    </item>
    
    <item>
      <title>磁盘</title>
      <link>https://tazegi.github.io/post/linux/%E7%A3%81%E7%9B%98/</link>
      <pubDate>Sat, 18 Feb 2023 23:02:17 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E7%A3%81%E7%9B%98/</guid>
      <description>磁盘 前言 创建设备文件
➜ ~ ll /dev/nvme0n1p1 brw-rw---- 1 root disk 259, 1 Jan 15 19:57 /dev/nvme0n1p1 ➜ ~ s mknod nvme1 b 259 1 ➜ ~ ll nvme1 brw-r--r-- 1 root root 259, 1 Jan 15 22:27 nvme1 ➜ ~ s mount nvme1 /mnt ➜ ~ ll /mnt total 8.0K drwxr-xr-x 6 root root 4.0K Nov 1 06:43 EFI drwxr-xr-x 2 root root 4.0K Jan 12 13:24 &amp;#39;System Volume Information&amp;#39; 创建zero</description>
    </item>
    
    <item>
      <title>Sed</title>
      <link>https://tazegi.github.io/post/linux/sed/</link>
      <pubDate>Sat, 18 Feb 2023 22:49:43 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/sed/</guid>
      <description> sed 忽略大小写: sed -n &amp;#34;/ROOT/Ip&amp;#34; 取反: sed -n &amp;#34;/root/!p&amp;#34; 同 sed &amp;#34;/root/d&amp;#34; 修改并备份: sed -i.orig &amp;#34;/root/d&amp;#34; 替换: sed -i.bak &amp;#34;/^SELINUX=disabled/c SELINUX=enforcing&amp;#34; /etc/selinux/config 搜索替换 sed -Ei.bak &amp;#34;s/^(SELINUX=).*/\1enforcing/&amp;#34; /etc/selinux/config grub
sed -Ei.bak &amp;#39;/^GRUB_CMDLINE_LINUX/s/(.*)&amp;#34;$/\1 net.ifnames=0&amp;#39; /etc/default/grub sed -nr &amp;#39;/^GRUB_CMDLINE/s/&amp;#34;$/ net.ifnames=0&amp;#34;/p&amp;#39; /etc/default/grub ip
ifconfig wlan0 |sed -rn &amp;#39;2s/^[^0-9]+([0-9.]+) .*$/\1/p&amp;#39; 将没有搜索到的行加#
sed -Ei.bak &amp;#39;/^#/!s/^/#/&amp;#39; /etc/fstab </description>
    </item>
    
    <item>
      <title>软件包</title>
      <link>https://tazegi.github.io/post/linux/%E8%BD%AF%E4%BB%B6%E5%8C%85/</link>
      <pubDate>Sat, 18 Feb 2023 22:17:53 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E8%BD%AF%E4%BB%B6%E5%8C%85/</guid>
      <description>软件包 动态链接: 程序运行时会调用 静态链接: 把程序对应的信赖库复制一份到包 查询信赖库: ldd /bin/cat 查询已经加载的库: ldconfig -p rpm 利用cpio工具查看文件列表
rpm2cpio bash-4.4.rpm | cpio -idv rpm -[i,e] 安装,卸载 v 显示详细过程 h 安装进度 rpm -q ncompress 查询包是否存在 rpm -qa *查询安装的所有包*
模糊查询: rpm -qa |grep http 可选: rpm -qa &amp;#34;*http*​&amp;#34; *不带p的查询已安装的包*
rpm -qi tree 查询已安装包的信息 rpm -ql tree 列出包包含的文件及放入的文件夹 带p的查询本地的包文件
rpm -qpi rpm 包文件 查询 文件 中包的信息 rpm -qpl rpm 包文件 列出包包含的文件及放入的文件夹 *查询磁盘上的文件来自于哪个包*: rpm -qf /usr/bin/tree 查询哪个包提供了bash命令: rpm -q --whatprovides bash *查询bash命令信赖于哪些包*: rpm -q --whatrequires bash 查询配置文件: rpm -qc bash 查询程序的文档: rpm -qd bash 查询更新日志: rpm -q --changelog bash 查询包携带的脚本: rpm -q --scripts bash</description>
    </item>
    
    <item>
      <title>压缩</title>
      <link>https://tazegi.github.io/post/linux/%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Sat, 18 Feb 2023 17:53:41 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%8E%8B%E7%BC%A9/</guid>
      <description>压缩 对文件 compress 安装ncompress 比较
➜ ~ ll emerge.txt w-r--r-- 1 f f 50K Dec 29 22:05 emerge.txt ➜ ~ compress emerge.txt ➜ ~ ll emerge.txt.Z w-r--r-- 1 f f 20K Dec 29 22:05 emerge.txt.Z gentoo没有 uncompress 命令
compress -d emerge.txt.Z #可选 zcat emerge.txt.Z &amp;gt; emerge.txt 选项
-c 结果输出至标准输出,不删除原文件
#压缩 compress -c emerge.txt &amp;gt; emerge.txt.Z #解压缩 compress -dc emerge.txt.Z &amp;gt; emerge2.txt -v 显示详情 文件预览: zcat emerge.txt.Z gzip,gunzip gzip emerge.txt gunzip emerge.</description>
    </item>
    
    <item>
      <title>Xargs</title>
      <link>https://tazegi.github.io/post/linux/xargs/</link>
      <pubDate>Sat, 18 Feb 2023 17:11:22 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/xargs/</guid>
      <description>xargs 将输入传给下一个命令,作为其的参数 seq 10 |xargs 多行变1行, echo {1..10} |xargs -n1 1行变多g行
➜ ~ seq 10 1 2 3 4 5 6 7 8 9 10 ➜ ~ seq 10 |xargs 1 2 3 4 5 6 7 8 9 10 ➜ ~ echo {1..10} 1 2 3 4 5 6 7 8 9 10 ➜ ~ echo {1..10} |xargs -n1 1 2 3 4 5 6 7 8 9 10 批量创建用户</description>
    </item>
    
    <item>
      <title>Find</title>
      <link>https://tazegi.github.io/post/linux/find/</link>
      <pubDate>Wed, 15 Feb 2023 01:46:30 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/find/</guid>
      <description>locate locate
下载: vj mlocate updatedb
➜ ~ locate passwd locate: can not stat () `/var/lib/mlocate/mlocate.db&amp;#39;: No such file or directory
选项
-i 不区分大小写 -n 只列举前n个项目 -r 使用基本正则表达式
locate -r &amp;#34;\.conf$&amp;#34;
使用正则匹配以.conf结尾的文件 \. 转义正则.(任意一个字符) locate conf 匹配包含conf的文件 区配规则是模糊匹配 find 通配符要加双引号
查找 指定搜索目录层级
-maxdepth -mindepth
find /etc/ -maxdepth 2 -mindepth 2 对每个目录先处理目录内的文件,再处理目录本身
-depth -d 根据文件名和inode查找
-name -iname 不区分大小写 -inum 按inode号查找
find / -inum 256 -ls -samefile 相同inode的文件 -links 链接数为n的文件 -regex 匹配整个文件路径,而非文件名称</description>
    </item>
    
    <item>
      <title>子进程</title>
      <link>https://tazegi.github.io/post/linux/%E5%AD%90%E8%BF%9B%E7%A8%8B/</link>
      <pubDate>Wed, 15 Feb 2023 01:17:40 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%AD%90%E8%BF%9B%E7%A8%8B/</guid>
      <description> {} 执行1组命令,不开启子进程 {}最后1个命令要加分号,花括号后面必须有空格,zsh不南要分号和空格 {}和()的区别
#{} ➜ ~ name=evil520;{ echo $name;name=tang;echo $name; };echo $name evil520 tang tang ➜ ~ bash f@gentoo ~ $ name=evil520;{ echo $name;name=tang;echo $name; };echo $name evil520 tang tang #() ➜ ~ name=evil520;( echo $name;name=tang;echo $name; );echo $name evil520 tang evil520 ➜ ~ bash f@gentoo ~ $ name=evil520;( echo $name;name=tang;echo $name; );echo $name evil520 tang evil520 结论: 子进程的变量继承父进程,子进程对变量的修改不影响父进程 ​|后面的所有命令会开启子进程
#zsh中管道不会开启子进程 ➜ ~ echo evil520 |read X;echo $X evil520 #切换到bash ➜ ~ bash evil520 #输出为空 f@gentoo ~/blog/hugo $ echo evil520 |read X;echo $X f@gentoo ~/blog/hugo $ echo evil520 | { read X;echo $X; } evil520 </description>
    </item>
    
    <item>
      <title>条件判断</title>
      <link>https://tazegi.github.io/post/linux/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link>
      <pubDate>Wed, 15 Feb 2023 01:06:52 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid>
      <description>test help test
选项
-v 判断变量是否定义,无法判断是否为空 -R 判断变量是否定义,或者为空 -L 判断文件是否为软链接, [ -L /lib ] -a -e 判断文件是否存有 []
在比较字符串时,建议放在&amp;#34;&amp;#34;中 [ &amp;#34;$string&amp;#34; ] 字符串是否不空 [​[]]
建议,当使用正则表达式或通配符使用,一般情况使用[] 与[]的区别
比较字符串用 == 支持通配符 可以用正则表达式 =~ 结论
#==右侧的*,想做为通配符,不要加&amp;#34;&amp;#34;,只想做为*,需要加&amp;#34;&amp;#34;或转义 [[ == * ]] case in yes,no脚本
read -p &amp;#34;Do you agree(yes/no)?&amp;#34; INPUT case $INPUT in [Yy]|[Yy][Ee][Ss]) echo &amp;#34;You input is YES&amp;#34; ;; [Nn]|[Nn][On]) echo &amp;#34;You input is NO&amp;#34; ;; ,*) echo &amp;#34;Input false,please input yes or no!</description>
    </item>
    
    <item>
      <title>Shell脚本</title>
      <link>https://tazegi.github.io/post/linux/shell%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Tue, 14 Feb 2023 23:45:20 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/shell%E8%84%9A%E6%9C%AC/</guid>
      <description>shell脚本 bash语法检查: bash -n
调试: bash -x 脚本错误常见的有3种
语法错误,会导致后续的命令不继续执行,可以用bash -n检查错误 命令错误,后续的命令还会继续执行,用bash -n无法检查出来,可以使用bash -x进行观察 逻辑错误,只能使用bash -x进行观察 $- 变量(bash有效)
h: 打开选项后.shell会将命令所在的路径hash下来.通过 set +h 将h选项关闭 i: 当前shell是一个交互式的shell.在脚本中,i选项是关闭的 m: monitor,打开监控模式,就可以通过Job control来控制进程的停止,继续,后台或者前台执行等 B: braceexpand,大括号扩展 H: 可以通过!感叹号来调用历史命令 set
set -o 查看选项 set -o errexit on 防止命令错误继续执行
help set
errexit same as -e
同 set -e ,遇到$?不为0就退出 true, echo $? 永远为真 false, echo $? 永远为假 set -u 防止使用未定义的变量
-u – no-unset nounset same as -u
同 set -o nounset 总结: set -ue set -x 当执行命令时,打印命令及其参数,类似bash -x shift用命令行参数实现批量创建用户</description>
    </item>
    
    <item>
      <title>文本</title>
      <link>https://tazegi.github.io/post/linux/%E6%96%87%E6%9C%AC/</link>
      <pubDate>Tue, 14 Feb 2023 23:18:14 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E6%96%87%E6%9C%AC/</guid>
      <description>文本 vim 匹配行
. 当前行 2,+5 $ set fileformat=[dos,unix]
set ff set textwidth=65 xp c-w s c-w v c-w q c-w a ma `a` cat -A -E -n -b 非空行编号 tac rev nl 同 cat -b
tail -[fn0,0f] 跟踪文件描述符 文件删除无法跟踪
tail -F 跟踪文件名 cut #1,3,4,5 cut -d: -f1,3-5 /etc/passwd df|tr -s &amp;#34; &amp;#34; &amp;#34;%&amp;#34;|cut -d% -f5 paste paste 两个文件横向合并 paste -s -d: wc #过滤第1行 df|tail -n $(echo $(df|wc -l)-1|bc) sort sort -nt: -k3 /etc/passwd #倒序 sort -nrt: -k3 /etc/passwd uniq 删除前后相邻的重复行 -c count -d duplicate 仅显示重复的行 -u unique 仅显示不曾重复的行 查看连接的ip: ss -nt #去掉第1行 ss -nt|tail -n+2 ss -nt|tail -n+2|tr -s &amp;#34; &amp;#34; :|cut -d: -f6 |sort |uniq -c |sort -nr ss -nt |sed -En &amp;#39;/^ESTAB/s#.</description>
    </item>
    
    <item>
      <title>用户和组</title>
      <link>https://tazegi.github.io/post/linux/%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/</link>
      <pubDate>Tue, 14 Feb 2023 23:05:13 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84/</guid>
      <description> 用户和组 passwd,shaow,group,gshadow sudo getent shadow root getent passwd root useradd -r 创建系统用户 新建用户的相关文件 /etc/default/useradd /etc/skel/* /etc/login.defs 批量创建 #批量创建用户 newusers passwd格式文件 #批量改密码 echo name:password |chpasswd cat p.txt |chpasswd 批量创建用户
echo user{1..10} |xargs -n1 useradd echo user{1..10} |xargs -n1 userdel -r getent passwd 组 查看用户所有的组: groups f 查看组的成员: groupmems -l -g video 权限 chmod -R a+X dir,给目录加上可执行权限,但不影响文件 </description>
    </item>
    
    <item>
      <title>IO</title>
      <link>https://tazegi.github.io/post/linux/io/</link>
      <pubDate>Tue, 14 Feb 2023 22:51:24 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/io/</guid>
      <description>IO proc 进程
/proc/PID/fd/3 指向文件路径 proc/PID/fd[0,1,2] 指向标准输出输入终端 echo $$ (查看当前shell的PID)
cd /proc/$$/fd echo默认换行
清空1个文件: echo -n &amp;gt; file 合并多个命令的标准输出
(ls;date) &amp;gt; file {ls;date} &amp;gt; file 管道符后面的命令心须支持标准输入 管道符默认只支持标准输出,不支持标准错误
ls . /err | tr &amp;#34;a-z&amp;#34; &amp;#34;A-Z&amp;#34; ls . /err 2&amp;gt;&amp;amp;1 | tr &amp;#34;a-z&amp;#34; &amp;#34;A-Z&amp;#34; ls . /err |&amp;amp; tr &amp;#34;a-z&amp;#34; &amp;#34;A-Z&amp;#34; 重定向
单行重定向 cat &amp;gt; cat.log 多行重定向
cat &amp;gt; cat.log &amp;lt;&amp;lt;EOF EOF 多行重定向可以嵌入命令 PS2影响多行重定向提示符 tr
tr &amp;#34;123&amp;#34; &amp;#34;abc&amp;#34;
1 -&amp;gt; a 2 -&amp;gt; b 3 -&amp;gt; c tr -d abc 删除字母a,b,c tr -s (–squeeze-repeats),去重 tr -c (-C –complement),取补集 发邮件 install postfix install mailx enable postfix mail -s subject name mail -s subject name &amp;lt; mail.</description>
    </item>
    
    <item>
      <title>硬盘数据的组成</title>
      <link>https://tazegi.github.io/post/linux/%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E6%88%90/</link>
      <pubDate>Tue, 14 Feb 2023 22:16:10 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E7%A1%AC%E7%9B%98%E6%95%B0%E6%8D%AE%E7%9A%84%E7%BB%84%E6%88%90/</guid>
      <description> 硬盘数据的组成 元数据 存放在节点表中
inode(节点号),使用 df -i 查看 文件类型 权限 UID 所有者 GID 所属组 链接数 文件大小和时间戳 指向磁盘文件的数据块指针
直接指针
直接指向数据具体位置 每个指向4k的数据块 总共12个 只能存储48k的数据,超过使用间接指针 间接指针
指向指针,总大小4k,每个指针4字节,共1024个,每个指向4k数据块 1级指针可以存4m数据 数据本身 如何访问文件
文件和文件夹的元数据都在节点表中 先找到是那块磁盘,从挂载点依次向下 硬链接
本质是同1个文件,取了2个名 磁盘真正占的空间只是1个的空间,只是在多个目录中引用了同1个节点号 因为硬链接的文件具有相同的节点号,是同1个文件,所以不能跨分区 </description>
    </item>
    
    <item>
      <title>文件</title>
      <link>https://tazegi.github.io/post/linux/%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 14 Feb 2023 21:56:56 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E6%96%87%E4%BB%B6/</guid>
      <description>文件 文件类型: - d b c l p(pipe) s(socket)
p s都是进程间的通信,不同在于p单向传输,s是双向传输 basename和dirname
➜ ~ dirname /etc/syslog-ng/syslog-ng.conf /etc/syslog-ng ➜ ~ basename /etc/syslog-ng/syslog-ng.conf syslog-ng.conf 每个文件都有3个时间
mtime: 文件修改时间 ctime(change time): 文件权限,所有者修改时间 atime(access time): 文件读取时间 查看3个时间: stat ety.org 查看文件类型: file /bin/ls touch 存在的文件刷新时间,不存在的文件创建 在bash无法使用星号, 在zsh会刷新当前文件夹全部文件时间(不会改变子文件夹) 指定刷新某个时间
-a 仅改变atime和ctime -m 仅改变mtime和ctime -c 如果文件不存在,则不予创建 cp 格式
cp [OPTION]… [-T] SOURCE DEST
cp [OPTION]… SOURCE… DIRECTORY
cp [OPTION]… -t DIRECTORY SOURCE…
cp会导致时间,所有者发生改变,默认会覆盖文件,不拷贝链接而拷贝原文件 常用选项
-p (–preserve) 保留属性,same as –preserve=mode,ownership,timestamps -R, -r, –recursive 递归拷贝,拷贝文件夹 -d –no-dereference –preserve=links 不寻找源文件 -a, –archive 常用于备份,same as -dR –preserve=all -f, –force 覆盖不属于该用户的文件</description>
    </item>
    
    <item>
      <title>命令</title>
      <link>https://tazegi.github.io/post/linux/%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 14 Feb 2023 21:37:06 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%91%BD%E4%BB%A4/</guid>
      <description>命令 install install功能相当于cp,chmod,chown,chgrp等相关工具的集合
#复制文件 # -m 权限 -o 所有者 -g 所属组 install -m 640 -o f -g f test.sh Desktop/ # 创建文件夹 install -m 700 -o f -g f -d testdir 默认是755,适合复制可执行程序
expect 复制到远程
#!/usr/bin/expect spawn scp /etc/fstab 10.0.0.7:/data expect { &amp;#34;yes/no&amp;#34; { send &amp;#34;yes\n&amp;#34;;exp_continue } &amp;#34;password&amp;#34; { send &amp;#34;xxxxxx\n&amp;#34; } } expect eof 远程登录主机
#!/usr/bin/expect spawn ssh 10.0.0.7 expect { &amp;#34;yes/no&amp;#34; { send &amp;#34;yes\n&amp;#34;;exp_continue } &amp;#34;password&amp;#34; { send &amp;#34;xxxxxx\n&amp;#34; } } interact expect使用变量</description>
    </item>
    
    <item>
      <title>字符集和编码</title>
      <link>https://tazegi.github.io/post/linux/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</link>
      <pubDate>Tue, 14 Feb 2023 21:21:41 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%AD%97%E7%AC%A6%E9%9B%86%E5%92%8C%E7%BC%96%E7%A0%81/</guid>
      <description> 字符集和编码 字符集 二进制的字符的对应关系,如Unicode 编码 决定在磁盘上如何保存,如utf-8类似字体
Unicode只是约定了那个二进制表示那个文字,没有约定在磁盘上如何保存,就像 echo
$LANG 查看语言和编码 #-e 输出ASCII文字 echo -e &amp;#34;\0127\0130&amp;#34; echo -e &amp;#34;\x61\x62&amp;#34; echo -e &amp;#34;\e[31mwelcome\e[0m&amp;#34; utf-8,utf-16,utf-32
utf-8 变长字符集,可能占1,2,3,4 utf-16 要么占2个字节,要么占4个字节 utf-32 固定占4个字节 查看字符的16进制: echo &amp;#34;abc&amp;#34; | hexdump -C
查看汉字的16进制: echo &amp;#34;饕餮&amp;#34; | hexdump -C xxd od -t x1z 0a 表式换行 查看ASCII表: man ascii 输出8进制: echo -e &amp;#34;\0127\0130&amp;#34; \0代表后面为8进制,127后面是130因为8进制逢8进1 输出16进制: echo -e &amp;#34;\x57\x58&amp;#34; </description>
    </item>
    
    <item>
      <title>会话管理</title>
      <link>https://tazegi.github.io/post/linux/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 14 Feb 2023 20:58:48 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86/</guid>
      <description> 会话管理 screen实现屏幕共享
#开启help会话 screen -S help #查看 screen -ls #加入 screen -x help #退出共享 C-a,d </description>
    </item>
    
    <item>
      <title>日期和时间</title>
      <link>https://tazegi.github.io/post/linux/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</link>
      <pubDate>Tue, 14 Feb 2023 20:40:32 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</guid>
      <description> 日期和时间 #set date 月 日 时 分 年.秒 date 122807002022.30 date 010100002000.00 #查看硬件时间 sudo hwclock #校正系统时间 hwclock -s --hctosys #校正硬件时间 hwclock -w --systohc #日历 #显示今年 cal -y cal 2022 cal 1 2023 cal 9 1752 show
date -d now date -d yesterday date -d tomorrow date -d &amp;#34;-2 day&amp;#34; date -d &amp;#34;100 day&amp;#34; #秒-&amp;gt;日期 date +%s date -d @1672247243 +%F\ %T #查看前天是星期几 date -d &amp;#34;-2 day&amp;#34; +%w 定时开关机 #关机 halt #十分钟后关机 shutdown +10 #十分钟后关机 shutdown 08:00 #取消 shutdown -c #十分钟后重启 shutdown -r +10 </description>
    </item>
    
    <item>
      <title>编码格式</title>
      <link>https://tazegi.github.io/post/linux/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</link>
      <pubDate>Tue, 14 Feb 2023 20:36:27 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</guid>
      <description> 编码格式 windows和linux文本文件的差异
换行的表示
linux: 0a LF \n windows: 0d 0a CRLF \r\n \r 回车 \n 换行 转化: dos2unix 编码转换:iconv
#查看支持转换的编码 iconv -l #将gb2312转换为utf8 #-f from iconv -f GB2312 windows.txt -o windows1.txt </description>
    </item>
    
    <item>
      <title>技巧</title>
      <link>https://tazegi.github.io/post/linux/%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Tue, 14 Feb 2023 19:47:39 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E6%8A%80%E5%B7%A7/</guid>
      <description>技巧 结合多条命令输出
{uname -r;uname -m} CAPS或&amp;lt;&amp;gt;表示变化的数据 查看文件的16进制
hexdump -C awk.org bc十进制转二进制
bc obase=2 4 查看所有隐藏文件
ls -Ad .* 查看磁盘开头512个字节
sudo hexdump -C -n 512 /dev/nvme0n1p1 uname,who
#release uname -r #all uname -a #查看登录了几个用户 who echo {000..10..2} M-&amp;lt;num&amp;gt; l /etc
#登录成功的欢迎提示 /etc/motd #登录前提示 /etc/issue #查看当前shell以及可用shell echo $SHELL cat /etc/shells #查看操作系统 cat /etc/os-release 查看cpu
lscpu cat /proc/cpuinfo 带颜色输出
#-e 支持\ #[31m 红色 #[0m 结束 echo -e &amp;#34;\e[31mwelcome\e[0m&amp;#34; whereis 和 whatis 结合使用查看man目录和命令的关系</description>
    </item>
    
    <item>
      <title>通配符</title>
      <link>https://tazegi.github.io/post/linux/%E9%80%9A%E9%85%8D%E7%AC%A6/</link>
      <pubDate>Tue, 14 Feb 2023 19:28:09 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E9%80%9A%E9%85%8D%E7%AC%A6/</guid>
      <description>通配符 #去wang的家目录 cd ~wang #~- 前1个工作目录 #访问上次工作目录的awk.org而不需要用-切换文件夹 cat ~-/awk.org #同 cat $OLDPWD/awk.org #? 任意一个字符 #查找7个字符的文件 ll ??????? #会包含大写字母,顺序是小大小大.a-A-b-B-c 没有大写C ls [a-c].txt #要包含全部大小写a,b,c ls [a-C].txt #C-d-D-e-E 没有小写c ls [C-E].txt #匹配所有大小写字母 ls [a-Z].txt 星号不会匹配包含隐藏文件
#预定义的字符 [:digit:] [:lower:] [:upper:] [:alpha:] 任意大小写字母 [:alnum:] 任意数字或字母 [:blank:] 水平空白字符 [:space:] 水平或垂直空白字符 [:punct:] 标点符号 [:print:] 可打印字符 [:cntrl:] 控制(非打印)字符 [:graph:] 图形字符 [:xdigit:] 十六进制字符 [],[^]同正则
#查看所有隐藏文件: ls -Ad .* #不是所有命令都支持通配符 touch file*.log #生成随机密码 cat /dev/urandom 什么符号都有 tr -dc &amp;#34;[:alnum:]&amp;#34; &amp;lt; /dev/urandom |head -c 12 openssl rand -base64 12 点不是通配符</description>
    </item>
    
    <item>
      <title>命令的帮助用法</title>
      <link>https://tazegi.github.io/post/linux/%E5%91%BD%E4%BB%A4%E7%9A%84%E5%B8%AE%E5%8A%A9%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 14 Feb 2023 19:24:39 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%91%BD%E4%BB%A4%E7%9A%84%E5%B8%AE%E5%8A%A9%E7%94%A8%E6%B3%95/</guid>
      <description> 命令的帮助用法 ➜ ~ whatis cal ls: nothing appropriate.
sudo mandb #查看描述 whatis cal #等价于 man -f cal #内部命令 help history </description>
    </item>
    
    <item>
      <title>History</title>
      <link>https://tazegi.github.io/post/linux/history/</link>
      <pubDate>Tue, 14 Feb 2023 19:20:50 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/history/</guid>
      <description> history #清空 history -c #删除第offset个命令 #zsh无效 history -d num #显示最近n条 #bash history n #zsh history -n !n !-n #调用最近开头为d的命令 !d #打印命令,不执行 !d:p #包含 !?at 仅bash
#追加本次会话新执行的命令列表至历史文件 history -a #显示时间 HISTTIMEFORMAT=&amp;#34;%F %T &amp;#34; #获取上个命令的全部参数 !* !:1 !^ !$ </description>
    </item>
    
    <item>
      <title>内部命令</title>
      <link>https://tazegi.github.io/post/linux/%E5%86%85%E9%83%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 14 Feb 2023 16:28:41 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%86%85%E9%83%A8%E5%91%BD%E4%BB%A4/</guid>
      <description> 内部命令 查看 #内部命令:包含在bash中,在内存中 help bash #查看所有内部命令 enable #搜索内部命令的外部命令 type -a echo 禁用内部命令 #禁用内部命令 #help中echo前有星号,说明ehco被禁用 enable -n echo whereis #查看命令文档路径 whereis ls #查看全部缓存的命令 hash #清楚缓存 hash -r #清楚某条缓存 hash -r hostname 命令优先级 别名&amp;gt;内部&amp;gt;外部
#取消别名功能 \ls </description>
    </item>
    
    <item>
      <title>内核升级</title>
      <link>https://tazegi.github.io/post/linux/%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/</link>
      <pubDate>Tue, 14 Feb 2023 16:15:38 +0800</pubDate>
      
      <guid>https://tazegi.github.io/post/linux/%E5%86%85%E6%A0%B8%E5%8D%87%E7%BA%A7/</guid>
      <description> 内核升级 download
emerge --ask --update --deep --with-bdeps=y --newuse sys-kernel/gentoo-sources eselect kernel set 1 eselect kernel list cd /usr/src/linux copy
cp /boot/config-3.14.14-gentoo /usr/src/linux/.config zcat /proc/config.gz &amp;gt; /usr/src/linux/.config merge
make oldconfig #字符串“（NEW）”在该行结束时标记该选项是新的。左边的方括号中的字符串是可能的答案：“Y”是，“N”不是，“m”模块，或者“？”显示帮助。推荐(或者说是默认)答案是大写（“Y”）。帮助说明解释了选项或驱动程序。 #当外部内核模块被安装 (如 NVIDIA 或 ZFS)，在制作内核前可能需要运行 make modules_prepare ，在这里 有它的描述。在构建上述额外的模块之前，一些模块在内核构建之前不能被安装或准备好。 compare
#另外，内核提供了一个脚本，可以干净地比较两个配置文件，即使已经移动了文件中的选项。 /usr/src/linux/scripts/diffconfig .config.old .config compile
make menuconfig #根据系统可用的速度和内核数量，构建内核可能需要相当长的时间。如果已知系统中 CPU 核的数量，可以使用-jN (其中 N 是可用核的数量加1)选项来加速复杂的处理过程。例如，一个双核处理器包含两个逻辑核加一个(2 + 1)。确定可用核心数量的一个简单方法是运行 nproc 命令: nproc make -j13 install
make modules_install make install sudo genkernel --lvm --install initramfs #包含内核模块的包可以使用@module-rebuild命令重新编译 sudo emerge --ask @module-rebuild </description>
    </item>
    
  </channel>
</rss>
